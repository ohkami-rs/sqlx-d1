{"$message_type":"diagnostic","message":"cannot find type `BoxStream` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/connection.rs","byte_start":2087,"byte_end":2096,"line_start":72,"line_end":72,"column_start":14,"column_end":23,"is_primary":true,"text":[{"text":"        ) -> BoxStream<","highlight_start":14,"highlight_end":23}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `BoxStream` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/connection.rs:72:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ) -> BoxStream<\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `DateTime`, `FixedOffset`, `Local`, `NaiveDateTime`, `NaiveDate`, `NaiveTime`, `TimeZone`, and `Utc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/types.rs","byte_start":8287,"byte_end":8298,"line_start":243,"line_end":243,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        FixedOffset,","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8308,"byte_end":8316,"line_start":244,"line_end":244,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        DateTime,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8326,"byte_end":8331,"line_start":245,"line_end":245,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"        Local,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8341,"byte_end":8350,"line_start":246,"line_end":246,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        NaiveDate,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8360,"byte_end":8369,"line_start":247,"line_end":247,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        NaiveTime,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8379,"byte_end":8392,"line_start":248,"line_end":248,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        NaiveDateTime,","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8402,"byte_end":8410,"line_start":249,"line_end":249,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        TimeZone,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/types.rs","byte_start":8420,"byte_end":8423,"line_start":250,"line_end":250,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Utc,","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/types.rs","byte_start":8247,"byte_end":8431,"line_start":242,"line_end":251,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    use sqlx_core::types::chrono::{","highlight_start":5,"highlight_end":36},{"text":"        FixedOffset,","highlight_start":1,"highlight_end":21},{"text":"        DateTime,","highlight_start":1,"highlight_end":18},{"text":"        Local,","highlight_start":1,"highlight_end":15},{"text":"        NaiveDate,","highlight_start":1,"highlight_end":19},{"text":"        NaiveTime,","highlight_start":1,"highlight_end":19},{"text":"        NaiveDateTime,","highlight_start":1,"highlight_end":23},{"text":"        TimeZone,","highlight_start":1,"highlight_end":18},{"text":"        Utc,","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `DateTime`, `FixedOffset`, `Local`, `NaiveDateTime`, `NaiveDate`, `NaiveTime`, `TimeZone`, and `Utc`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types.rs:243:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        FixedOffset,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        DateTime,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m245\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Local,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m246\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NaiveDate,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NaiveTime,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        NaiveDateTime,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        TimeZone,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Utc,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`D1Connection` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/connection.rs","byte_start":1937,"byte_end":1957,"line_start":66,"line_end":66,"column_start":52,"column_end":72,"is_primary":true,"text":[{"text":"    impl<'c> sqlx_core::executor::Executor<'c> for &'c mut D1Connection {","highlight_start":52,"highlight_end":72}],"label":"`D1Connection` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `D1Connection`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `D1Connection` or manually `impl std::fmt::Debug for D1Connection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'c mut D1Connection` to implement `std::fmt::Debug`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `Executor`","code":null,"level":"note","spans":[{"file_name":"/home/kanarus/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.3/src/executor.rs","byte_start":1401,"byte_end":1406,"line_start":33,"line_end":33,"column_start":32,"column_end":37,"is_primary":true,"text":[{"text":"pub trait Executor<'c>: Send + Debug + Sized {","highlight_start":32,"highlight_end":37}],"label":"required by this bound in `Executor`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `D1Connection` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/connection.rs:66:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<'c> sqlx_core::executor::Executor<'c> for &'c mut D1Connection {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`D1Connection` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `D1Connection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `D1Connection` or manually `impl std::fmt::Debug for D1Connection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'c mut D1Connection` to implement `std::fmt::Debug`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `Executor`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/kanarus/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/sqlx-core-0.8.3/src/executor.rs:33:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Executor<'c>: Send + Debug + Sized {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Executor`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"not all trait items implemented, missing: `fetch_optional`, `prepare_with`, `describe`","code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src/connection.rs","byte_start":1890,"byte_end":1957,"line_start":66,"line_end":66,"column_start":5,"column_end":72,"is_primary":true,"text":[{"text":"    impl<'c> sqlx_core::executor::Executor<'c> for &'c mut D1Connection {","highlight_start":5,"highlight_end":72}],"label":"missing `fetch_optional`, `prepare_with`, `describe` in implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"implement the missing item: `fn fetch_optional<E>(self, _: E) -> Pin<Box<(dyn std::future::Future<Output = Result<std::option::Option<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Row>, sqlx_core::Error>> + Send + 'e)>> where E: Execute { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/connection.rs","byte_start":2489,"byte_end":2489,"line_start":85,"line_end":85,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"    fn fetch_optional<E>(self, _: E) -> Pin<Box<(dyn std::future::Future<Output = Result<std::option::Option<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Row>, sqlx_core::Error>> + Send + 'e)>> where E: Execute { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn prepare_with(self, _: &'q str, _: &'e [<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::TypeInfo]) -> Pin<Box<(dyn std::future::Future<Output = Result<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Statement<'q>, sqlx_core::Error>> + Send + 'e)>> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/connection.rs","byte_start":2489,"byte_end":2489,"line_start":85,"line_end":85,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"    fn prepare_with(self, _: &'q str, _: &'e [<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::TypeInfo]) -> Pin<Box<(dyn std::future::Future<Output = Result<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Statement<'q>, sqlx_core::Error>> + Send + 'e)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"implement the missing item: `fn describe(self, _: &'q str) -> Pin<Box<(dyn std::future::Future<Output = Result<Describe<<Self as Executor<'c>>::Database>, sqlx_core::Error>> + Send + 'e)>> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src/connection.rs","byte_start":2489,"byte_end":2489,"line_start":85,"line_end":85,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"    fn describe(self, _: &'q str) -> Pin<Box<(dyn std::future::Future<Output = Result<Describe<<Self as Executor<'c>>::Database>, sqlx_core::Error>> + Send + 'e)>> { todo!() }\n    ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0046]\u001b[0m\u001b[0m\u001b[1m: not all trait items implemented, missing: `fetch_optional`, `prepare_with`, `describe`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/connection.rs:66:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<'c> sqlx_core::executor::Executor<'c> for &'c mut D1Connection {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `fetch_optional`, `prepare_with`, `describe` in implementation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: \u001b[0m\u001b[0mimplement the missing item: `fn fetch_optional<E>(self, _: E) -> Pin<Box<(dyn std::future::Future<Output = Result<std::option::Option<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Row>, sqlx_core::Error>> + Send + 'e)>> where E: Execute { todo!() }`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: \u001b[0m\u001b[0mimplement the missing item: `fn prepare_with(self, _: &'q str, _: &'e [<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::TypeInfo]) -> Pin<Box<(dyn std::future::Future<Output = Result<<<Self as Executor<'c>>::Database as sqlx_core::database::Database>::Statement<'q>, sqlx_core::Error>> + Send + 'e)>> { todo!() }`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: \u001b[0m\u001b[0mimplement the missing item: `fn describe(self, _: &'q str) -> Pin<Box<(dyn std::future::Future<Output = Result<Describe<<Self as Executor<'c>>::Database>, sqlx_core::Error>> + Send + 'e)>> { todo!() }`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0046, E0277, E0412.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0046, E0277, E0412.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0046`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0046`.\u001b[0m\n"}
