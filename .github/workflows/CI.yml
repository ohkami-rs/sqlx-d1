name: CI

on:
  pull_request:
  push:
    branches: [main, v*]

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: ['stable', 'nightly']
        target: ['', 'wasm32-unknown-unknown']

    steps:
      - uses: actions/checkout@v4

      - name: Setup mold
        run:  |
          sudo apt install mold clang
          echo '[target.x86_64-unknown-linux-gnu]'                     >> $HOME/.cargo/config.toml
          echo 'linker    = "clang"'                                   >> $HOME/.cargo/config.toml
          echo 'rustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold"]' >> $HOME/.cargo/config.toml

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          targets:   wasm32-unknown-unknown

      - name: Test documentations
        working-directory: ./sqlx-d1
        run: cargo test --doc --target wasm32-unknown-unknown --features DEBUG

      - name: Check buildability
        working-directory: ./sqlx-d1
        run: |
          TARGET=$(test '${{ matrix.target }}' && echo '${{ matrix.target }}' || (rustc -vV | grep 'host' | sed 's/host: //'))
          echo "---> testing on target '$TARGET'"
          cargo build --target $TARGET
          cargo build --target $TARGET --features json
          cargo build --target $TARGET --features uuid
          cargo build --target $TARGET --features chrono
          cargo build --target $TARGET --features macros
          cargo build --target $TARGET --features json,uuid,chrono,macros

      - name: Check sandbox
        working-directory: ./sandbox
        run: |  # sandbox has `.cargo/config.toml` that specifies `target = "wasm32-unknown-unknown"`
          mv ./wrangler.toml.sample ./wrangler.toml
          mv ./.sqlx ./tmp
          cargo build 2>&1 | tee tmp.log \
            && (echo '---> unexpectedly build scceeded'; exit 1) \
            || (grep 'Neither miniflare D1 emulator nor .sqlx directory is found !' tmp.log && echo '---> expected behavior' || exit 1)
          mv ./tmp ./.sqlx
          cargo build
          cargo build --features DEBUG  # check `readme_sample`
